FILTERS.DOC
-----------

There are several highlighting filters in the filters subdirectory.  These all
are programs that read a file, usually from the standard input, and write to
the standard output.  Vile invokes these, uses the marked-up text to display
highlighting.

Except for the manpage filter (a special case) all of these can be (and most
are) implemented using lex.


KEYWORDS
--------

Each filter reads one or more keyword files, which list specific keywords
and their highlighting attributes, as well as classes of keywords.

The filters search for these files in the current, $HOME, $HOME/vile and
startup directories.  On Unix, the keyword files in the current and $HOME
directories are hidden using a "." prefix.  Except for MS-DOS, the suffix is
".keywords"; on that platform it is ".key".  In the source distribution, these
files are ".key", to keep them compatible with MS-DOS 8.3 filename lengths.

You can specify the root name to search, otherwise they search for "vile" and
the compiled-in filter name.  For example, the C filter (vile-c-filt) will
search first for

	./.vile.keywords
	$HOME/.vile.keywords
	$HOME/vile/vile.keywords
	$VILE_STARTUP_PATH/vile.keywords

and then

	./.c.keywords
	$HOME/.c.keywords
	$HOME/vile/c.keywords
	$VILE_STARTUP_PATH/c.keywords

in each case stopping as soon as it has found a corresponding file.  The
leading '.' for the filename is used only to hide the file; there is no
distinction made about the contents of the files.  The vile.keywords file
contains color information for the most common classes.  The c.keywords file
contains the actual keywords to be highlighted, referenced to the classes which
are in turn colored.  You can see the search for keyword files by running the
filter with a -v option, repeating the option to get more verbose traces.

Predefined keyword classes include (but may not necessarily be used in specific
filters):

	Action
	Comment
	Ident
	Ident2
	Keyword
	Keyword2
	Literal
	Number
	Preproc
	Type

A few filters, e.g., cweb, latex, diff, use additional classes.  The predefined
classes are a guideline, to implement a common style across the different
filters.

Each line in the keyword file consists of two strings separated by a colon (:).
If the first string is empty, the line is treated as a comment.  The second
string is interpreted as follows:

	+ if quoted with single quotes, any value is permitted.  Use a doubled
	  quote to insert a quote character.  Literal values of this type are
	  used to override internal parameters of the filter programs.  See
	  m4-filt.c for an example.

	+ otherwise (the usual case), the string is an identifier, which
	  happens to include the characters used in vile's control/A
	  highlighting attributes (digits plus the characters ABCDEFIRU).

	  If the second string matches a keyword class (or in fact, any other
	  keyword), the highlighting attributes of that keyword are used.  An
	  empty attribute string implies the default class, which usually
	  is "Keyword".

	  If the second string does not match a keyword, it must be a set of
	  highlighting attributes, which will be used for the first string.
	  A special case is made for a string beginning "N", which is treated
	  as no-attributes.

	  See "Writing your own filters" in vile.hlp for additional details
	  about attribute strings.

The keyword file reader supports a limited include facility.  If a line begins
with ".include", it reads from the given keyword file.  A few filters (such as
html) require multiple symbol tables; these include using ".merge".  In either
case, the parameter of the include is the root name of the keyword file, e.g.,
"c" for "c.key".  Use the ".table" directive to simply switch to a different
symbol table in the same file with the same effect as ".merge".

Use the ".default" directive to change the default class.  The parameter must
be the name of a class which has already been defined.  Omit the parameter to
reset the default back to "Keyword".

You can change the characters assigned to ':' and '.' using ".equals" and
".meta" directives, respectively.

You can modify the behavior slightly, by giving an absolute pathname with the
-k option, but otherwise the filters search for both "vile" and the specific
language keywords, if any.


PROGRAMS
--------

The following are implemented:

	vile-ada-filt	(Ada95)
	vile-awk-filt	(awk)
	vile-bat-filt	(DOS batchfiles)
	vile-c-filt	(C language)
	vile-cfg-filt	(Lynx configure file)
	vile-cweb-filt	(CWEBx)
	vile-dcl-filt	(VMS DCL batchfiles)
	vile-diff-filt	(diff/patch files)
	vile-esql-filt	(embedded SQL with C/C++)
	vile-html-filt	(HTML with embedded JavaScript)
	vile-latex-filt	(LaTeX or TeX)
	vile-lex-filt	(lex)
	vile-key-filt	(Vile keyword files)
	vile-m4-filt	(m4)
	vile-mail-filt	(mail folders)
	vile-make-filt	(make)
	vile-manfilt	(manual-page)
	vile-mms-filt	(VMS makefiles)
	vile-nr-filt	(nroff)
	vile-pas-filt	(Pascal)
	vile-perl-filt	(Perl)
	vile-py-filt	(Python)
	vile-rcs-filt	(RCS archives)
	vile-rexx-filt	(REXX)
	vile-sccs-filt	(SCCS archives)
	vile-sh-filt	(sh/ksh/csh)
	vile-spell-filt	(ispell highlights misspelled words)
	vile-sql-filt	(SQL scripts)
	vile-tags-filt	(ctags tags files)
	vile-tbl-filt	(Vile's mktbl format)
	vile-tc-filt	(termcap)
	vile-tcl-filt	(TCL/TK)
	vile-ti-filt	(terminfo)
	vile-txt-filt	(plain text files, such as vile.hlp)
	vile-vile-filt	(Vile's macros)
	vile-xres-filt	(X Window resources)
	vile-xs-filt	(Perl extension)
	vile-yacc-filt	(yacc)

Not all majormodes require a special filter for highlighting, since they
use the same syntax as other majormodes:

	cppmode		C++ uses C filter
	cshmode		C-shell uses shell filter
	imakemode	Imake uses C filter
	javamode	Java uses C filter
	jsmode		JavaScript uses C filter
	potmode		Message libraries use shell filter


NOTE
----

The lex filters have been well tested only with flex, which treats newlines
differently.  Older versions of lex may not support the %x states.

-- $Header: /users/source/archives/vile.vcs/doc/RCS/filters.doc,v 1.17 1999/12/27 02:30:26 tom Exp $
